{"version":3,"sources":["logo.svg","lookup/components.js","tweets/buttons.js","tweets/lookup.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendlookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","response","status","onerror","e","console","log","send","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","window","location","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","Fragment","href","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetDidSet","useEffect","final","newTweets","concat","username","apiTweetList","alert","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","onSubmit","newVal","current","value","ref","required","TweetsComponent","setNewTweets","canTweet","disTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","App","src","logo","alt","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f808d9be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\r\n  let cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n      const cookies = document.cookie.split(';');\r\n      for (let i = 0; i < cookies.length; i++) {\r\n          const cookie = cookies[i].trim();\r\n          // Does this cookie string begin with the name we want?\r\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n              break;\r\n          }\r\n      }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nexport function backendlookup(method,endpoint,callback,data){\r\n  let jsonData;\r\n  if(data){\r\n    jsonData = JSON.stringify(data)\r\n  }\r\n  const xhr    = new XMLHttpRequest()\r\n  const url    =`http://127.0.0.1:8000/api${endpoint}`\r\n  xhr.responseType = \"json\"\r\n  const csrftoken = getCookie('csrftoken');\r\n  xhr.open(method,url)\r\n  xhr.setRequestHeader(\"Content-Type\",\"application/json\")\r\n  if(csrftoken){xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)}\r\n  xhr.onload = function() {\r\n    xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")  \r\n    callback(xhr.response,xhr.status)\r\n  }\r\n  xhr.onerror =function (e) {\r\n    console.log(e)\r\n    callback({\"message\":\"the request was an error\"},400)\r\n  }\r\n  xhr.send(jsonData)\r\n}\r\n\r\n","import React from 'react'\r\nimport {apiTweetAction} from './lookup'\r\n\r\nexport function ActionBtn(props){\r\n    const {tweet,action,didPerformAction} = props \r\n    const likes = tweet.likes ? tweet.likes : 0\r\n    const className = props.className ? props.className : 'btn btn-primary btn-small' \r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n    const handleActionBackendEvent = (response,status) => {\r\n        if((status === 200 || status === 201) && didPerformAction){\r\n            didPerformAction(response,status)\r\n        }\r\n    }\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        apiTweetAction(tweet.id,action.type,handleActionBackendEvent)\r\n        \r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className = {className} onClick={handleClick}>{display}</button>\r\n  }","import {backendlookup} from '../lookup'\r\n\r\nexport function apiTweetCreate(newTweet, callback){\r\n    backendlookup(\"POST\",\"/tweets/create/\",callback,{content:newTweet})\r\n}\r\n\r\nexport function apiTweetAction(tweetId,action, callback){\r\n    const data = {id:tweetId,action:action}\r\n    backendlookup(\"POST\",\"/tweets/action/\",callback,data)\r\n}\r\n\r\nexport function apiTweetDetail(tweetId,callback){\r\n    backendlookup(\"GET\",`/tweets/${tweetId}/`,callback)\r\n}\r\n\r\n  \r\nexport function apiTweetList(username,callback){\r\n    let endpoint = \"/tweets/\"\r\n    if(username){\r\n        endpoint = `/tweets/?username=${username}/`\r\n    }\r\n    backendlookup(\"GET\",endpoint,callback)\r\n}","import React,{useState} from 'react'\r\nimport {ActionBtn} from './buttons'\r\n\r\n\r\nexport function ParentTweet(props){\r\n    const {tweet} = props\r\n    return tweet.parent ? <div className='row'>\r\n    <div className='col-11 mx-auto p-3 border rounded'>\r\n    <p className='mb-0 text-muted small'>Retweet</p>\r\n    <Tweet hideActions className = {' '} tweet={tweet.parent} />\r\n    </div>   \r\n    </div> : null\r\n}  \r\n\r\nexport function Tweet(props){\r\n    const {tweet, didRetweet, hideActions} = props\r\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    const path = window.location.pathname\r\n    const match = path.match(/(?<tweetid>\\d+)/)\r\n    const urlTweetId = match ? match.groups.tweetid : -1\r\n    const isDetail = `${tweet.id}` === `${urlTweetId}`\r\n    const handleLink = (event) => {\r\n        event.preventDefault()\r\n        window.location.href = `/${tweet.id}`\r\n    }\r\n\r\n    const handlePerformAction = (newActionTweet,status) =>{\r\n        if(status === 200){\r\n            setActionTweet(newActionTweet)\r\n        }else if(status === 201){\r\n            if(didRetweet){\r\n                didRetweet(newActionTweet)\r\n            }\r\n        }\r\n        \r\n    }\r\n    return <div className={className}>\r\n        <div>\r\n            <p>{tweet.id} - {tweet.content}</p> \r\n            <ParentTweet  tweet = {tweet}/>\r\n        </div>\r\n        <div className='btn btn-group'>\r\n        {(actionTweet && hideActions !== true) &&     <React.Fragment>\r\n            <ActionBtn tweet={actionTweet} didPerformAction = {handlePerformAction} action={{type:\"like\",display:\"Likes\"}}/>\r\n            <ActionBtn tweet={actionTweet} didPerformAction = {handlePerformAction} action={{type:\"Unlike\",display:\"UnLikes\"}}/>\r\n            <ActionBtn tweet={actionTweet} didPerformAction = {handlePerformAction} action={{type:\"ReTweet\",display:\"Retweet\"}}/>\r\n            </React.Fragment>\r\n        }       \r\n        { isDetail === true ? null : <button className='btn btn-outline-primary btn-small' onClick={handleLink}>View</button>}\r\n        </div>\r\n    </div>\r\n}","import React,{useState,useEffect} from 'react'\r\nimport {apiTweetList} from './lookup'\r\nimport {Tweet} from './detail'\r\n\r\nexport function TweetsList(props){\r\n    const [tweetsInit,setTweetsInit] = useState([])\r\n    const [tweets,setTweets] = useState([])\r\n    const [tweetsDidSet,setTweetDidSet] = useState(false)\r\n    useEffect(() => {\r\n        const final = [...props.newTweets].concat(tweetsInit)\r\n        if(final.length !== tweets.length){\r\n            setTweets(final)\r\n        }\r\n    },[props.newTweets,tweets,tweetsInit])\r\n\r\n\r\n    useEffect(() => {\r\n        if(tweetsDidSet === false){\r\n            const handleTweetListLookup = (response, status) => {\r\n                if(status === 200){\r\n                    setTweetsInit(response)\r\n                    setTweetDidSet(true)\r\n                }else{\r\n                    alert(\"there was an error\")\r\n                }  \r\n            }\r\n            apiTweetList(props.username,handleTweetListLookup)\r\n        }\r\n    },[tweetsInit, tweetsDidSet, setTweetDidSet, props.username])\r\n\r\n    const handleDidRetweet = (newTweet) => {\r\n        const updateTweetsInit = [...tweetsInit]\r\n        updateTweetsInit.unshift(newTweet)\r\n        setTweetsInit(updateTweetsInit)\r\n        const updateFinalTweets = [...tweets]\r\n        updateFinalTweets.unshift(tweets)\r\n        setTweets(updateFinalTweets)\r\n    }\r\n  \r\n    return tweets.map((item,index) => {\r\n      return <Tweet \r\n            tweet={item} \r\n            didRetweet = {handleDidRetweet}\r\n            className='my-5 py-5 border bg-white text-dark' key={`${index}-{tweet.id}`}\r\n            key={`${index}-{item.id}`} />\r\n    })\r\n }\r\n\r\n","import React from 'react'\r\nimport {apiTweetCreate} from './lookup'\r\n\r\n\r\nexport function TweetCreate(props){\r\n    const textAreaRef = React.createRef()\r\n    const {didTweet} = props\r\n    const handleBackendUpdate = (response,status) => {\r\n        if (status === 201){\r\n            didTweet(response)   \r\n        } else {\r\n            console.log(response)\r\n            alert(\"An error occured please try again\")\r\n        }    \r\n    }\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const newVal = textAreaRef.current.value\r\n        apiTweetCreate(newVal,handleBackendUpdate)\r\n        textAreaRef.current.value = ''\r\n    }\r\n    return <div className={props.className}>\r\n            <form onSubmit={handleSubmit}>\r\n            <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\r\n\r\n            </textarea> \r\n            <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n            </form>\r\n        </div>\r\n}","import React,{useEffect,useState} from 'react'\r\nimport {TweetsList} from './list'\r\nimport {Tweet} from './detail'\r\nimport {apiTweetDetail} from './lookup'\r\nimport {TweetCreate} from './create'\r\n\r\n\r\nexport function TweetsComponent(props){\r\n\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const canTweet = props.canTweet === \"false\" ? false : true\r\n    const handleNewTweet = (newTweet) => {\r\n        let tempNewTweets = [...newTweets]\r\n        tempNewTweets.unshift(newTweet)\r\n        setNewTweets(tempNewTweets)\r\n    }\r\n\r\n    return <div className={props.className}>\r\n            {canTweet === true && <TweetCreate  disTweet={handleNewTweet} className='col-12 mb-3' />}\r\n           <TweetsList newTweets={newTweets} {...props} />\r\n           </div> \r\n} \r\n\r\n\r\nexport function TweetDetailComponent(props){\r\n    const {tweetid} = props\r\n    const [didLookup,setDidLookup] = useState(false)\r\n    const [tweet,setTweet] = useState(null)\r\n    const handleBackendLookup = (response,status) => {\r\n        if(status === 200){\r\n            setTweet(response)\r\n        }else{\r\n            alert(\"there was an error finding your tweet.\")\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(didLookup === false){\r\n            apiTweetDetail(tweetid)\r\n            setDidLookup(true)\r\n        }\r\n    },[tweetid,didLookup,setDidLookup])\r\n\r\n    return tweet === null ? null : <Tweet tweet={tweet} className = {props.className}/>\r\n}\r\n\r\n\r\n   ","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div>\n          <TweetsComponent />\n        </div>  \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent,TweetDetailComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\n\nconst appEl = document.getElementById('root')\nif(appEl){\n  ReactDOM.render(<App />,appEl);\n}\n\nconst e = React.createElement\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif(tweetsEl){\n   ReactDOM.render(e(TweetsComponent,tweetsEl.dataset),tweetsEl);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-2-detail\")\n\ntweetDetailElements.forEach(container => {\n  ReactDOM.render(e(TweetDetailComponent,container.dataset),container);\n})\n\nserviceWorker.unregister();\n"],"sourceRoot":""}